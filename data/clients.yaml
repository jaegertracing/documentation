featureGroups:
  - description: Data format and transport for reporting spans to Jaeger backend
    features:
    - name: report_jaeger_thrift_compact_udp
      description: Report [`jaeger.thrift`](https://github.com/jaegertracing/jaeger-idl/blob/master/thrift/jaeger.thrift), [Compact](https://github.com/apache/thrift/blob/v0.13.0/doc/specs/thrift-compact-protocol.md) protocol, over UDP
    - name: report_jaeger_thrift_binary_udp
      description: Report [`jaeger.thrift`](https://github.com/jaegertracing/jaeger-idl/blob/master/thrift/jaeger.thrift), [Binary](https://github.com/apache/thrift/blob/v0.13.0/doc/specs/thrift-binary-protocol.md) protocol, over UDP
    - name: report_jaeger_thrift_binary_http
      description: Report [`jaeger.thrift`](https://github.com/jaegertracing/jaeger-idl/blob/master/thrift/jaeger.thrift), [Binary](https://github.com/apache/thrift/blob/v0.13.0/doc/specs/thrift-binary-protocol.md) protocol, over TCP (HTTP)
    - name: report_zipkin_thrift_binary_http
      description: Report Zipkin Thrift, Binary protocol, over TCP (HTTP)

  - description: Inter-process propagation wire format (headers)
    features:
    - name: propagation_uber
      description: "[Uber's original headers](../client-libraries/#propagation-format)"
    - name: propagation_b3
      description: Zipkin's [B3 headers](https://github.com/openzipkin/b3-propagation)
    - name: propagation_w3c
      description: "[W3C Trace Context headers](https://github.com/w3c/distributed-tracing)"
    - name: jaeger_debug_id
      description: Support inbound `jaeger-debug-id` header
    - name: jaeger_baggage
      description: Accept baggage from `jaeger-baggage` headers
    - name: 128bit_trace_id
      description: Support for 128bit Trace ID

  - description: Metrics
    features:
    - name: standard_tracer_metrics
      description: Support standard tracer metrics (number of spans started, finished, reported, etc.)
    - name: standard_rpc_metrics
      description: Support standard RPC metrics
    - name: prometheus_metrics
      description: Metrics in [Prometheus](http://prometheus.io/) format

  - description: Tracer configuration
    features:
    - name: configuration
      description: Support declarative tracer configuration
    - name: config_tracer_tags
      description: Allow configuring tracer tags, aka process tags
    - name: remote_sampler
      description: Allow remote configuration of samplers
    - name: adaptive_sampler
      description: Remotely configurable [adaptive sampler](../sampling)
    - name: baggage_restriction
      description: Remotely configurable baggage restrictions

  - description: Tracer configuration via environment variables
    features:
    - name: env_JAEGER_SERVICE_NAME
      description: >
        `JAEGER_SERVICE_NAME` defines service name that will be associated with the emitted spans.
    - name: env_TRACER_TAGS
      description: >
        `JAEGER_TAGS` defines a comma-separated list of static tags, aka "tracer tags",
        e.g. `hostname=foobar,my.app.version=1.2.3`.
        These tags are added as the `Process` tags to each span.
    - name: env_JAEGER_DISABLED
      description: >
        `JAEGER_DISABLED` (_not recommended_) when set to true, instructs the Configuration to return
        a no-op tracer. Neither trace/span IDs nor baggage will be propagated with a no-op tracer.
        Instead of disabling the tracer completely, use `const` sampler with `0` param,
        which will minimize the overhead but keep the propagation going.
    - name: env_JAEGER_AGENT_HOST
      description: >
        `JAEGER_AGENT_HOST` defines hostname for reporting spans over UDP/Thrift.
        To avoid packet loss, the agent is expected to run on the same machine as the application.
        This var is useful when there are multiple networking namespaces on the host.
    - name: env_JAEGER_AGENT_PORT
      description: >
        `JAEGER_AGENT_PORT` defines port for reporting spans over UDP/Thrift.
    - name: env_JAEGER_ENDPOINT
      description: >
        `JAEGER_ENDPOINT` defines the URL for reporting spans via HTTP/Thrift.
        This setting allows for a deployment mode where spans are submitted directly to the collector.
    - name: env_JAEGER_AUTH_TOKEN
      description: >
        `JAEGER_AUTH_TOKEN` defines an optional auth token when reporting over HTTP.
    - name: env_JAEGER_USER
      description: >
        `JAEGER_USER` can be used for basic authentication when reporting over HTTP.
    - name: env_JAEGER_PASSWORD
      description: >
        `JAEGER_PASSWORD` can be used for basic authentication when using reporting over HTTP.
    - name: env_JAEGER_REPORTER_LOG_SPANS
      description: >
        `JAEGER_REPORTER_LOG_SPANS` instructs the [Reporter](../client-libraries/#reporters)
        to log finished span IDs. The reporter may need to be given a Logger for this option to take effect.
    - name: env_JAEGER_REPORTER_MAX_QUEUE_SIZE
      description: >
        `JAEGER_REPORTER_MAX_QUEUE_SIZE` defines the max size of the in-memory buffer
        used to keep spans before they are sent out.
    - name: env_JAEGER_REPORTER_FLUSH_INTERVAL
      description: >
        `JAEGER_REPORTER_FLUSH_INTERVAL` defines how frequently the report flushes span batches.
        Reporter can also flush the batch if the batch size reaches the maximum UDP packet size (~64Kb).
    - name: env_JAEGER_SAMPLER_TYPE
      description: >
        `JAEGER_SAMPLER_TYPE` defines the type of sampler to use, e.g. `probabilistic`, or `const`
        (see [Sampling](../client-libraries/#sampling)).
    - name: env_JAEGER_SAMPLER_PARAM
      description: >
        `JAEGER_SAMPLER_PARAM` provides configuration value to the sampler, e.g. `probability=0.001`
        (see [Sampling](../client-libraries/#sampling)).
    - name: env_JAEGER_SAMPLER_MANAGER_HOST_PORT
      description: >
        `JAEGER_SAMPLER_MANAGER_HOST_PORT` defines the address of HTTP server that services client
        configuration, such as sampling strategies, baggage restrictions, throttling config, etc.
        The variable name is a legacy misnomer from the time when the server only provided the sampling
        strategies. At the moment only `jaeger-agent` implements this REST API.
    - name: env_JAEGER_SAMPLER_REFRESH_INTERVAL
      description: >
        `JAEGER_SAMPLER_REFRESH_INTERVAL` defines how often the sampler polls the config server
        for updates to the sampling strategies.
    - name: env_JAEGER_SAMPLER_MAX_OPERATIONS
      description: >
        `JAEGER_SAMPLER_MAX_OPERATIONS` instructs the adaptive sampler to limit how many distinct
        operation names the sampler will track, to avoid unbound memory usage.
    - name: env_JAEGER_PROPAGATION
      description: >
        `JAEGER_PROPAGATION` defines the propagation format used by the tracer.
        Supported values are `jaeger` (defined [here](../client-libraries/#propagation-format)),
        `b3` (defined [here](https://github.com/openzipkin/b3-propagation))
        and `w3c` (defined [here](https://github.com/w3c/distributed-tracing))
    - name: JAEGER_TRACEID_128BIT
      description: >
        `JAEGER_TRACEID_128BIT` if true, instructs the tracer to generate 128bit trace IDs
        instead of the default 64bit. In the future 128bit will become the default.
    - name: env_JAEGER_RPC_METRICS
      description: >
        `JAEGER_RPC_METRICS` when true, enables additional generation of RPC metrics
        from the tracing instrumentation. This is an experimental feature in the Go client.
        See also https://github.com/opentracing-contrib/java-metrics.

clients:
  - language: Go
    repo: jaegertracing/jaeger-client-go
    features:
      report_jaeger_thrift_compact_udp: yes
      report_jaeger_thrift_binary_udp: no
      report_jaeger_thrift_binary_http: yes
      report_zipkin_thrift_binary_http: yes
      propagation_uber: yes
      propagation_b3: yes
      propagation_w3c: coming
      jaeger_debug_id: when there is no trace
      jaeger_baggage: when there is no trace
      standard_tracer_metrics: yes
      standard_rpc_metrics: yes
      prometheus_metrics: yes
      configuration: yes
      config_tracer_tags: yes
      remote_sampler: yes
      adaptive_sampler: yes
      baggage_restriction: yes
      env_JAEGER_SERVICE_NAME: yes
      env_JAEGER_AGENT_HOST: yes
      env_JAEGER_AGENT_PORT: yes
      env_JAEGER_REPORTER_LOG_SPANS: yes
      env_JAEGER_REPORTER_MAX_QUEUE_SIZE: yes
      env_JAEGER_REPORTER_FLUSH_INTERVAL: yes
      env_JAEGER_SAMPLER_TYPE: yes
      env_JAEGER_SAMPLER_PARAM: yes
      env_JAEGER_SAMPLER_MANAGER_HOST_PORT: yes
      env_TRACER_TAGS: yes
      env_JAEGER_DISABLED: yes
      env_JAEGER_RPC_METRICS: yes
      env_JAEGER_SAMPLER_MAX_OPERATIONS: yes
      env_JAEGER_SAMPLER_REFRESH_INTERVAL: yes
      env_JAEGER_ENDPOINT: yes
      env_JAEGER_AUTH_TOKEN: no
      env_JAEGER_USER: yes
      env_JAEGER_PASSWORD: yes
      env_JAEGER_PROPAGATION: no
      128bit_trace_id: yes
      JAEGER_TRACEID_128BIT: no

  - language: Java
    repo: jaegertracing/jaeger-client-java
    features:
      report_jaeger_thrift_compact_udp: yes
      report_jaeger_thrift_binary_udp: no
      report_jaeger_thrift_binary_http: yes
      report_zipkin_thrift_binary_http: yes
      propagation_uber: yes
      propagation_b3: yes
      propagation_w3c: yes
      jaeger_debug_id: when there is no trace
      jaeger_baggage: no
      standard_tracer_metrics: yes
      standard_rpc_metrics: no
      prometheus_metrics: yes
      configuration: yes
      config_tracer_tags: yes
      remote_sampler: yes
      adaptive_sampler: yes
      baggage_restriction: coming
      env_JAEGER_SERVICE_NAME: yes
      env_JAEGER_AGENT_HOST: yes
      env_JAEGER_AGENT_PORT: yes
      env_JAEGER_REPORTER_LOG_SPANS: yes
      env_JAEGER_REPORTER_MAX_QUEUE_SIZE: yes
      env_JAEGER_REPORTER_FLUSH_INTERVAL: yes
      env_JAEGER_SAMPLER_TYPE: yes
      env_JAEGER_SAMPLER_PARAM: yes
      env_JAEGER_SAMPLER_MANAGER_HOST_PORT: yes
      env_TRACER_TAGS: yes
      env_JAEGER_DISABLED: no
      env_JAEGER_RPC_METRICS: no
      env_JAEGER_SAMPLER_MAX_OPERATIONS: no
      env_JAEGER_SAMPLER_REFRESH_INTERVAL: no
      env_JAEGER_ENDPOINT: yes
      env_JAEGER_AUTH_TOKEN: yes
      env_JAEGER_USER: yes
      env_JAEGER_PASSWORD: yes
      env_JAEGER_PROPAGATION: yes
      128bit_trace_id: yes
      JAEGER_TRACEID_128BIT: yes

  - language: Node.js
    repo: jaegertracing/jaeger-client-node
    features:
      report_jaeger_thrift_compact_udp: no
      report_jaeger_thrift_binary_udp: yes
      report_jaeger_thrift_binary_http: yes
      report_zipkin_thrift_binary_http: no
      propagation_uber: yes
      propagation_b3: yes
      propagation_w3c: coming
      jaeger_debug_id:
      jaeger_baggage:
      standard_tracer_metrics: yes
      standard_rpc_metrics: no
      prometheus_metrics: no
      configuration: yes
      config_tracer_tags: yes
      remote_sampler: yes
      adaptive_sampler: yes
      baggage_restriction: coming
      env_JAEGER_SERVICE_NAME: yes
      env_JAEGER_AGENT_HOST: yes
      env_JAEGER_AGENT_PORT: yes
      env_JAEGER_REPORTER_LOG_SPANS: yes
      env_JAEGER_REPORTER_MAX_QUEUE_SIZE: no
      env_JAEGER_REPORTER_FLUSH_INTERVAL: yes
      env_JAEGER_SAMPLER_TYPE: yes
      env_JAEGER_SAMPLER_PARAM: yes
      env_JAEGER_SAMPLER_MANAGER_HOST_PORT: yes
      env_TRACER_TAGS: yes
      env_JAEGER_DISABLED: yes
      env_JAEGER_RPC_METRICS: no
      env_JAEGER_SAMPLER_MAX_OPERATIONS: no
      env_JAEGER_SAMPLER_REFRESH_INTERVAL: yes
      env_JAEGER_ENDPOINT: yes
      env_JAEGER_AUTH_TOKEN: no
      env_JAEGER_USER: yes
      env_JAEGER_PASSWORD: yes
      env_JAEGER_PROPAGATION: no
      128bit_trace_id: yes
      JAEGER_TRACEID_128BIT: no

  - language: Python
    repo: jaegertracing/jaeger-client-python
    features:
      report_jaeger_thrift_compact_udp: yes
      report_jaeger_thrift_binary_udp: no
      report_jaeger_thrift_binary_http: no
      report_zipkin_thrift_binary_http: no
      propagation_uber: yes
      propagation_b3: yes
      propagation_w3c: coming
      jaeger_debug_id: yes
      jaeger_baggage: yes
      standard_tracer_metrics: yes
      standard_rpc_metrics: no
      prometheus_metrics: yes
      configuration: yes
      config_tracer_tags: yes
      remote_sampler: yes
      adaptive_sampler: yes
      baggage_restriction: coming
      env_JAEGER_SERVICE_NAME: no
      env_JAEGER_AGENT_HOST: yes
      env_JAEGER_AGENT_PORT: yes
      env_JAEGER_REPORTER_LOG_SPANS: no
      env_JAEGER_REPORTER_MAX_QUEUE_SIZE: no
      env_JAEGER_REPORTER_FLUSH_INTERVAL: no
      env_JAEGER_SAMPLER_TYPE: no
      env_JAEGER_SAMPLER_PARAM: no
      env_JAEGER_SAMPLER_MANAGER_HOST_PORT: no
      env_TRACER_TAGS: yes
      env_JAEGER_DISABLED: no
      env_JAEGER_RPC_METRICS: no
      env_JAEGER_SAMPLER_MAX_OPERATIONS: no
      env_JAEGER_SAMPLER_REFRESH_INTERVAL: no
      env_JAEGER_ENDPOINT: no
      env_JAEGER_AUTH_TOKEN: no
      env_JAEGER_USER: no
      env_JAEGER_PASSWORD: no
      env_JAEGER_PROPAGATION: no
      128bit_trace_id: yes
      JAEGER_TRACEID_128BIT: yes

  - language: C++
    repo: jaegertracing/jaeger-client-cpp
    features:
      report_jaeger_thrift_compact_udp: yes
      report_jaeger_thrift_binary_udp: no
      report_jaeger_thrift_binary_http: yes
      report_zipkin_thrift_binary_http: no
      propagation_uber: yes
      propagation_b3: no
      propagation_w3c: coming
      jaeger_debug_id:
      jaeger_baggage:
      standard_tracer_metrics:
      standard_rpc_metrics: no
      prometheus_metrics:
      configuration:
      config_tracer_tags:
      remote_sampler: yes
      adaptive_sampler: yes
      baggage_restriction: no
      env_JAEGER_SERVICE_NAME: yes
      env_JAEGER_AGENT_HOST: yes
      env_JAEGER_AGENT_PORT: yes
      env_JAEGER_REPORTER_LOG_SPANS: yes
      env_JAEGER_REPORTER_MAX_QUEUE_SIZE: yes
      env_JAEGER_REPORTER_FLUSH_INTERVAL: yes
      env_JAEGER_SAMPLER_TYPE: yes
      env_JAEGER_SAMPLER_PARAM: yes
      env_JAEGER_SAMPLER_MANAGER_HOST_PORT: yes
      env_TRACER_TAGS: yes
      env_JAEGER_DISABLED: yes
      env_JAEGER_RPC_METRICS: no
      env_JAEGER_SAMPLER_MAX_OPERATIONS: no
      env_JAEGER_SAMPLER_REFRESH_INTERVAL: no
      env_JAEGER_ENDPOINT: yes
      env_JAEGER_AUTH_TOKEN: no
      env_JAEGER_USER: no
      env_JAEGER_PASSWORD: no
      env_JAEGER_PROPAGATION: no
      128bit_trace_id: yes
      JAEGER_TRACEID_128BIT: no

  - language: C#
    repo: jaegertracing/jaeger-client-csharp
    features:
      report_jaeger_thrift_compact_udp: yes
      report_jaeger_thrift_binary_udp: no
      report_jaeger_thrift_binary_http: yes
      report_zipkin_thrift_binary_http: no
      propagation_uber: yes
      propagation_b3: yes
      propagation_w3c: coming
      jaeger_debug_id: when there is no trace
      jaeger_baggage: no
      standard_tracer_metrics: yes
      standard_rpc_metrics: no
      prometheus_metrics:
      configuration: yes
      config_tracer_tags: yes
      remote_sampler: yes
      adaptive_sampler: yes
      baggage_restriction: coming
      env_JAEGER_SERVICE_NAME: yes
      env_JAEGER_AGENT_HOST: yes
      env_JAEGER_AGENT_PORT: yes
      env_JAEGER_REPORTER_LOG_SPANS: yes
      env_JAEGER_REPORTER_MAX_QUEUE_SIZE: yes
      env_JAEGER_REPORTER_FLUSH_INTERVAL: yes
      env_JAEGER_SAMPLER_TYPE: yes
      env_JAEGER_SAMPLER_PARAM: yes
      env_JAEGER_SAMPLER_MANAGER_HOST_PORT: yes
      env_TRACER_TAGS: yes
      env_JAEGER_DISABLED: no
      env_JAEGER_RPC_METRICS: no
      env_JAEGER_SAMPLER_MAX_OPERATIONS: no
      env_JAEGER_SAMPLER_REFRESH_INTERVAL: no
      env_JAEGER_ENDPOINT: yes
      env_JAEGER_AUTH_TOKEN: yes
      env_JAEGER_USER: yes
      env_JAEGER_PASSWORD: yes
      env_JAEGER_PROPAGATION: yes
      128bit_trace_id: yes
      JAEGER_TRACEID_128BIT: yes
